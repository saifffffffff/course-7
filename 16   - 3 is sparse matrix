#include "MyLib.h"
#include <array>
#include <vector>
#include <iostream>
#include <iomanip>
#include <string>
#include <cctype>
#include <chrono>
#include <fstream>
#include <ctime>


using namespace std;

void PrintMatrix(int m[100][100], short rows, short cols) {
	for (int i = 0; i < rows; i++)
	{
		for (int j = 0; j < cols; j++)
			cout << setw(3) << m[i][j] << " ";
		cout << endl;
	}

}
void FillMatrixWithRandomNumbers( int m[100][100] , short rows , short cols ) {
	for (int i = 0; i < rows; i++)
		for (int j = 0; j < cols; j++)
			m[i][j] = Random::GenerateRandomNumber(1, 100);
}
int RowSum(int m[100][100], int row, int cols) {
	int sum = 0;
	for (int i = 0; i < cols; i++)
		sum += m[row][i];
	return sum;
}
void PrintEachRowSum(int m[100][100], short rows, short cols) {
	for (int i = 0; i < rows; i++)
	{
		cout << "sum of row " << i + 1  << " : "  << RowSum(m, i, cols) << endl;
	}



}
void SumMatrixRowsInArray(int m[100][100],int arr[], short rows, short cols) {
	for (int i = 0; i < rows; i++)
		arr[i] = RowSum(m, i, cols);
}
void PrintRowSumArray(int arr[], short rows) {
	for (int i = 0; i < rows; i++)
	{
		cout << "sum of row " << i + 1 << " : " << arr[i] << endl;
	}



}
int ColSum(int m[100][100], short rows, short col) {
	int sum = 0;
	for (int i = 0; i < rows; i++)
		sum += m[i][col];
	return sum;

}
void PrintEachColSum(int m[100][100], short rows, short cols) {
	
	for (int i = 0; i < cols; i++)
		cout << "sum of col " << i + 1 << " : " << ColSum(m, rows, i) << endl;

}
void SumMatrixColsInArray(int m[100][100], int arr[], short rows, short cols) {

	for (int i = 0; i < cols; i++)
		arr[i] = ColSum(m, rows, i);
}
void PrintColSumArray(int arr[], int cols) {
	for (int i = 0; i < cols; i++)
		cout << "Sum Of Col " << i + 1 << " : " << arr[i] << endl;

}
void FillMatrixWithOrderedNumbers(int m[100][100], short rows, short cols) {
	short num = 1;
	for (int i = 0; i < rows; i++)
		for (int j = 0; j < cols; j++)
		{
			m[i][j] = num;
			num += 1;
		}
}
void TransposedMatrix(int m[100][100], short rows, short cols) {
	
	for (int i = 0; i < rows; i++)
		for (int j = i; j < cols ; j++)
			Utility::Swap(m[i][j], m[j][i]);
			
}
void TransposedMatrix(int m[100][100], int TransposedMatrix[100][100], short rows, short cols) {
	for (int i = 0; i < rows; i++) {
		for (int j = 0; j < cols; j++) {
			TransposedMatrix[j][i] = m[i][j];
		}
	}
}
void MultiplyTwoMatrices(int M1[100][100], int M2[100][100], int MResult[100][100], short rows, short cols) {
	for (int i = 0; i < rows; i++)
		for (int j = 0; j < cols; j++)
			MResult[i][j] = M1[i][j] * M2[i][j];
}
void PrintMiddleRow(int m[100][100], short rows, short cols) {
	short middleRow = rows / 2;
	for (int i = 0; i < cols; i++)
		printf("%0*d ",2,m[middleRow][i]);
}
void PrintMiddleCol(int m[100][100], short rows, short cols) {
	short middleCol = cols / 2;
	for (int i = 0; i < rows; i++)
		printf("%0*d ",2, m[i][middleCol]);
}
int SumOfMatrix(int m[100][100], short rows, short cols) {
	int sum = 0;

	for (int i = 0; i < rows; i++)
		for (int j = 0; j < cols; j++)
			sum += m[i][j];

	return sum;

}
bool AreEquivalentMatrices(int m1[100][100], int m2[100][100], short rows, short cols) {
	return (SumOfMatrix(m1, rows, cols) == SumOfMatrix(m2, rows, cols));
}

bool AreEqualMatrices(int m1[100][100], int m2[100][100], short rows, short cols) {
	for (int i = 0; i < rows; i++)
		for (int j = 0; j < cols; j++)
			if (m1[i][j] != m2[i][j])
				return false;
	return true;
}

bool IsIdentityMatrix(int m[100][100], short rows, short cols) {
	for (int i = 0 ; i < rows ; i++)
		for (int j = 0; j < cols; j++) {
			if (i == j && m[i][j] != 1)
					return false;
			else if (i != j && m[i][j] != 0){
				 
					return false;
			}
		}
	return true;
}

bool IsScalarMatrix(int m[100][100], short rows , short cols) {
	int FirstDiagonalNumber = m[0][0];
	for (int i = 0 ; i < rows ; i++)
		for (int j = 0; j < cols; j++)
		{
			if (i == j && m[i][j] != FirstDiagonalNumber)
				return false;
			else if (i != j && m[i][j] != 0)
				return false;
		}
	return true;
}
short CountNumberInMatrix(int m[100][100] , int NumToFind , short rows , short cols ){
	unsigned short counter = 0;

	for (int i = 0 ; i < rows ; i ++ )
		for (int j = 0; j < cols; j++) 
			if (m[i][j] == NumToFind)
				counter += 1;

	return counter;
}

// problem 16 / 3

// note : the sparse matrix is a matrix contains zeros the most
// My func
bool MyIsSparseMatrix(int m[100][100], short rows, short cols) {
	short ZerosCounter = 0, NumbersCounter = 0;
	for (int i = 0 ; i < rows ; i ++ )
		for (int j = 0; j < cols; j++) {
			if (m[i][j] != 0)
				NumbersCounter += 1;
			else
				ZerosCounter += 1;
		}
	return (ZerosCounter > NumbersCounter);
}
// abu had's func

bool IsSparseMatrix(int m[100][100], short rows, short cols) {
	unsigned short MatrixSize = rows * cols;
	return (CountNumberInMatrix(m, 0, rows, cols) >= (MatrixSize / 2));
}




int main() {
	srand((unsigned)time(NULL));
	int m1[100][100] = { {1, 2 ,3 },
						 {0 , 0 , 0},
						 {0 , 0 , 0} };
	
	PrintMatrix(m1, 3, 3);
	if (IsSparseMatrix(m1, 3, 3)) {
		cout << "yes";
	}
	else {
		cout << "no";
	}
}






 
